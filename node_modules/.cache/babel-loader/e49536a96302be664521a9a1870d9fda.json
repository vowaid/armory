{"ast":null,"code":"import\"core-js/modules/es.array.concat\";import\"core-js/modules/es.number.to-fixed\";import\"core-js/modules/es.regexp.exec\";import\"core-js/modules/es.string.replace\";import Big from\"big.js\";/**\n * Convert pixels to rems based on the base font size.\n *\n * @param {number|string} pixels The number of pixels to be converted to rems.\n * @param {number} baseFontSize The base font size for the typography of the application (usually `<p>` `font-size`).\n * @param {string} unit The string value of the units to be used. Can be null, will default to 'rem'.\n * @return {string} Returns the em value of the pixel size provided offset from the base font.\n */var pxToEm=function(pixels){var baseFontSize=1<arguments.length&&arguments[1]!==void 0?arguments[1]:14,unit=2<arguments.length&&arguments[2]!==void 0?arguments[2]:\"rem\",pixelValue=pixels,baseFontSizeValue=baseFontSize;if(\"string\"==typeof pixelValue){// If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\npixelValue=+pixelValue.replace(\"px\",\"\")}if(\"string\"==typeof baseFontSize){// If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\nbaseFontSizeValue=+baseFontSize.replace(\"px\",\"\")}// Only to 4 decimals as any more gets rounded to an improper value in the DOM.\nreturn\"\".concat(Big(pixelValue).div(baseFontSizeValue).toFixed(4)).concat(unit)},numToPx=function(number){if(\"number\"==typeof number){return\"\".concat(number,\"px\")}return number};/**\n * Take in a number or string and return the value as a px.\n *\n * @param {number|string} number The number attempting to be converted to px value.\n * @return {string} Returns the px value based on the number received.\n */export{numToPx,pxToEm};","map":{"version":3,"sources":["/Users/hollyos/dev/work/vowaid/armory/src/utils/styles/converters.js"],"names":["Big","pxToEm","pixels","baseFontSize","unit","pixelValue","baseFontSizeValue","replace","div","toFixed","numToPx","number"],"mappings":"oKAAA,MAAOA,CAAAA,GAAP,KAAgB,QAAhB,CAEA;;;;;;;MAQMC,CAAAA,MAAM,CAAG,SAACC,MAAD,CAA6C,IAApCC,CAAAA,YAAoC,wDAArB,EAAqB,CAAjBC,IAAiB,wDAAV,KAAU,CACpDC,UAAU,CAAGH,MADuC,CAEpDI,iBAAiB,CAAGH,YAFgC,CAIxD,GAA0B,QAAtB,QAAOE,CAAAA,UAAX,CAAoC,CAChC;AACAA,UAAU,EAAUA,UAAU,CAACE,OAAX,CAAmB,IAAnB,CAAyB,EAAzB,CACvB,CAED,GAA4B,QAAxB,QAAOJ,CAAAA,YAAX,CAAsC,CAClC;AACAG,iBAAiB,EAAUH,YAAY,CAACI,OAAb,CAAqB,IAArB,CAA2B,EAA3B,CAC9B,CAED;AACA,gBAAUP,GAAG,CAACK,UAAD,CAAH,CACLG,GADK,CACDF,iBADC,EAELG,OAFK,CAEG,CAFH,CAAV,SAEkBL,IAFlB,CAGH,C,CAQKM,OAAO,CAAG,SAACC,MAAD,CAAY,CACxB,GAAsB,QAAlB,QAAOA,CAAAA,MAAX,CAAgC,CAC5B,gBAAUA,MAAV,MACH,CAED,MAAOA,CAAAA,MACV,C,CAZD;;;;;GAcA,OAASD,OAAT,CAAkBT,MAAlB","sourcesContent":["import Big from 'big.js';\n\n/**\n * Convert pixels to rems based on the base font size.\n *\n * @param {number|string} pixels The number of pixels to be converted to rems.\n * @param {number} baseFontSize The base font size for the typography of the application (usually `<p>` `font-size`).\n * @param {string} unit The string value of the units to be used. Can be null, will default to 'rem'.\n * @return {string} Returns the em value of the pixel size provided offset from the base font.\n */\nconst pxToEm = (pixels, baseFontSize = 14, unit = 'rem') => {\n    let pixelValue = pixels;\n    let baseFontSizeValue = baseFontSize;\n\n    if (typeof pixelValue === 'string') {\n        // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n        pixelValue = Number(pixelValue.replace('px', ''));\n    }\n\n    if (typeof baseFontSize === 'string') {\n        // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n        baseFontSizeValue = Number(baseFontSize.replace('px', ''));\n    }\n\n    // Only to 4 decimals as any more gets rounded to an improper value in the DOM.\n    return `${Big(pixelValue)\n        .div(baseFontSizeValue)\n        .toFixed(4)}${unit}`;\n};\n\n/**\n * Take in a number or string and return the value as a px.\n *\n * @param {number|string} number The number attempting to be converted to px value.\n * @return {string} Returns the px value based on the number received.\n */\nconst numToPx = (number) => {\n    if (typeof number === 'number') {\n        return `${number}px`;\n    }\n\n    return number;\n};\n\nexport { numToPx, pxToEm };"]},"metadata":{},"sourceType":"module"}