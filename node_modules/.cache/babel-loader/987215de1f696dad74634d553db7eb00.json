{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.number.to-fixed\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport Big from 'big.js';\n/**\n * Convert pixels to rems based on the base font size.\n *\n * @param {number|string} pixels The number of pixels to be converted to rems.\n * @param {number} baseFontSize The base font size for the typography of the application (usually `<p>` `font-size`).\n * @param {string} unit The string value of the units to be used. Can be null, will default to 'rem'.\n * @return {string} Returns the em value of the pixel size provided offset from the base font.\n */\n\nvar pxToEm = function pxToEm(pixels) {\n  var baseFontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 14;\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rem';\n  var pixelValue = pixels;\n  var baseFontSizeValue = baseFontSize;\n\n  if (typeof pixelValue === 'string') {\n    // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n    pixelValue = Number(pixelValue.replace('px', ''));\n  }\n\n  if (typeof baseFontSize === 'string') {\n    // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n    baseFontSizeValue = Number(baseFontSize.replace('px', ''));\n  } // Only to 4 decimals as any more gets rounded to an improper value in the DOM.\n\n\n  return \"\".concat(Big(pixelValue).div(baseFontSizeValue).toFixed(4)).concat(unit);\n};\n/**\n * Take in a number or string and return the value as a px.\n *\n * @param {number|string} number The number attempting to be converted to px value.\n * @return {string} Returns the px value based on the number received.\n */\n\n\nvar numToPx = function numToPx(number) {\n  if (typeof number === 'number') {\n    return \"\".concat(number, \"px\");\n  }\n\n  return number;\n};\n\nexport { numToPx, pxToEm };","map":{"version":3,"sources":["/Users/hollyos/dev/work/vowaid/armory/src/utils/styles/converters.js"],"names":["Big","pxToEm","pixels","baseFontSize","unit","pixelValue","baseFontSizeValue","Number","replace","div","toFixed","numToPx","number"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA;;;;;;;;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAA6C;AAAA,MAApCC,YAAoC,uEAArB,EAAqB;AAAA,MAAjBC,IAAiB,uEAAV,KAAU;AACxD,MAAIC,UAAU,GAAGH,MAAjB;AACA,MAAII,iBAAiB,GAAGH,YAAxB;;AAEA,MAAI,OAAOE,UAAP,KAAsB,QAA1B,EAAoC;AAChC;AACAA,IAAAA,UAAU,GAAGE,MAAM,CAACF,UAAU,CAACG,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAD,CAAnB;AACH;;AAED,MAAI,OAAOL,YAAP,KAAwB,QAA5B,EAAsC;AAClC;AACAG,IAAAA,iBAAiB,GAAGC,MAAM,CAACJ,YAAY,CAACK,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAD,CAA1B;AACH,GAZuD,CAcxD;;;AACA,mBAAUR,GAAG,CAACK,UAAD,CAAH,CACLI,GADK,CACDH,iBADC,EAELI,OAFK,CAEG,CAFH,CAAV,SAEkBN,IAFlB;AAGH,CAlBD;AAoBA;;;;;;;;AAMA,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAY;AACxB,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,qBAAUA,MAAV;AACH;;AAED,SAAOA,MAAP;AACH,CAND;;AAQA,SAASD,OAAT,EAAkBV,MAAlB","sourcesContent":["import Big from 'big.js';\n\n/**\n * Convert pixels to rems based on the base font size.\n *\n * @param {number|string} pixels The number of pixels to be converted to rems.\n * @param {number} baseFontSize The base font size for the typography of the application (usually `<p>` `font-size`).\n * @param {string} unit The string value of the units to be used. Can be null, will default to 'rem'.\n * @return {string} Returns the em value of the pixel size provided offset from the base font.\n */\nconst pxToEm = (pixels, baseFontSize = 14, unit = 'rem') => {\n    let pixelValue = pixels;\n    let baseFontSizeValue = baseFontSize;\n\n    if (typeof pixelValue === 'string') {\n        // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n        pixelValue = Number(pixelValue.replace('px', ''));\n    }\n\n    if (typeof baseFontSize === 'string') {\n        // If the pixel value is a string remove the `px` unit from the string and convert the string to a number.\n        baseFontSizeValue = Number(baseFontSize.replace('px', ''));\n    }\n\n    // Only to 4 decimals as any more gets rounded to an improper value in the DOM.\n    return `${Big(pixelValue)\n        .div(baseFontSizeValue)\n        .toFixed(4)}${unit}`;\n};\n\n/**\n * Take in a number or string and return the value as a px.\n *\n * @param {number|string} number The number attempting to be converted to px value.\n * @return {string} Returns the px value based on the number received.\n */\nconst numToPx = (number) => {\n    if (typeof number === 'number') {\n        return `${number}px`;\n    }\n\n    return number;\n};\n\nexport { numToPx, pxToEm };"]},"metadata":{},"sourceType":"module"}